// Generated by CoffeeScript 1.6.3
(function() {
  define(function(require, exports, module) {
    var Keys, handleInput;
    Keys = require('Keys');
    handleInput = function(model) {
      var addMouseMotion, keyDownHandler, keyUpHandler, keysDown, mouseActive, mouseDownHandler, mouseMoveHandler, mouseUpHandler, removeMouseMotion;
      mouseActive = false;
      keysDown = {};
      addMouseMotion = function(x, y) {
        var direction, dx, dy, position;
        direction = model.inputDirection;
        position = model.me.position;
        dx = x - position.x;
        dy = y - position.y;
        if (dx !== 0) {
          direction.x = dx / Math.abs(dx);
        } else {
          direction.x = 0;
        }
        if (dy !== 0) {
          direction.y = dy / Math.abs(dy);
        } else {
          direction.y = 0;
        }
        return console.log("MouseMotion: ", direction.x, direction.y);
      };
      removeMouseMotion = function() {
        var direction;
        direction = model.inputDirection;
        direction.x = 0;
        return direction.y = 0;
      };
      keyDownHandler = function(e) {
        var direction;
        if (keysDown[e.which] != null) {
          return e.preventDefault();
        }
        keysDown[e.which] = true;
        direction = model.inputDirection;
        console.log('down', e.which);
        switch (e.which) {
          case Keys.left:
          case Keys.a:
            direction.x -= 1;
            e.preventDefault();
            break;
          case Keys.right:
          case Keys.d:
            direction.x += 1;
            e.preventDefault();
            break;
          case Keys.up:
          case Keys.w:
            direction.y -= 1;
            e.preventDefault();
            break;
          case Keys.down:
          case Keys.s:
            direction.y += 1;
            e.preventDefault();
        }
        return console.log("Down:", model.inputDirection);
      };
      keyUpHandler = function(e) {
        var direction;
        e.preventDefault();
        delete keysDown[e.which];
        direction = model.inputDirection;
        switch (e.which) {
          case Keys.left:
          case Keys.a:
            direction.x += 1;
            e.preventDefault();
            break;
          case Keys.right:
          case Keys.d:
            direction.x -= 1;
            e.preventDefault();
            break;
          case Keys.up:
          case Keys.w:
            direction.y += 1;
            e.preventDefault();
            break;
          case Keys.down:
          case Keys.s:
            direction.y -= 1;
            e.preventDefault();
        }
        return console.log("Up:", model.inputDirection);
      };
      mouseDownHandler = function(e) {
        e.preventDefault();
        return mouseActive = true;
      };
      mouseUpHandler = function(e) {
        e.preventDefault();
        mouseActive = false;
        return removeMouseMotion(e.clientX, e.clientY);
      };
      mouseMoveHandler = function(e) {
        e.preventDefault();
        if (mouseActive) {
          return addMouseMotion(e.clientX, e.clientY);
        }
      };
      $(document).on('keydown', keyDownHandler);
      $(document).on('keyup', keyUpHandler);
      $(document).on('mouseup', mouseUpHandler);
      $(document).on('mousedown', mouseDownHandler);
      return $(document).on('mousemove', mouseMoveHandler);
    };
    return handleInput;
  });

}).call(this);
