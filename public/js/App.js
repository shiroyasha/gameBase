// Generated by CoffeeScript 1.6.3
(function() {
  define(function(require, exports, module) {
    var App, Asteroids, Background, Glow, InputHandler, Physics, Planets, Player, RenderQueue, Stars, model;
    RenderQueue = require('RenderQueue');
    Background = require('Background');
    Stars = require('Stars');
    Asteroids = require('Asteroids');
    Planets = require('Planets');
    InputHandler = require('InputHandler');
    Player = require('Player');
    Glow = require('Glow');
    model = require('Model');
    Physics = require('physics/modelUpdater');
    App = (function() {
      function App(c) {
        this.c = c;
        this.model = model;
        InputHandler(this.model);
        this.queue = new RenderQueue();
        this.back = new Background(model);
        this.stars = new Stars(model);
        this.queue.add(new Planets(model));
        this.queue.add(new Asteroids(model));
        this.player = new Player(model);
        this.glow = new Glow(model);
        this.lastTime = null;
        requestAnimationFrame(this._loop.bind(this));
        this.angle = -Math.PI / 6;
      }

      App.prototype.update = function(dt) {
        var maxSpeed;
        if (this.model.inputDirection.y === -1) {
          this.model.me.velocity.x += Math.cos(this.model.me.orientation) * 100;
          this.model.me.velocity.y += Math.sin(this.model.me.orientation) * 100;
          maxSpeed = 10;
          this.model.me.velocity.x = Math.min(this.model.me.velocity.x, maxSpeed);
          this.model.me.velocity.y = Math.min(this.model.me.velocity.y, maxSpeed);
        }
        if (this.model.inputDirection.x === -1) {
          this.model.me.orientation -= 0.01;
        }
        if (this.model.inputDirection.x === 1) {
          this.model.me.orientation += 0.01;
        }
        Physics.updateModel(model, dt / 1000);
        this.queue.update(dt);
        this.stars.update(dt);
        this.back.update(dt);
        this.player.update(dt);
        return this.glow.update(dt);
      };

      App.prototype.render = function(c) {
        var X, Y;
        X = 600 - this.model.me.position.x;
        Y = 500 - this.model.me.position.y;
        this.back.render(c);
        this.stars.render(c);
        c.save();
        c.translate(X, Y);
        c.translate(this.model.me.position.x, this.model.me.position.y);
        c.rotate(-Math.PI / 2 - this.model.me.orientation);
        c.translate(-this.model.me.position.x, -this.model.me.position.y);
        c.fillStyle = 'red';
        c.fillRect(0, 0, 1280, 10);
        c.fillStyle = 'blue';
        c.fillRect(0, 0, 10, 720);
        this.queue.render(c);
        this.glow.render(c);
        return c.restore();
      };

      App.prototype._loop = function(time) {
        var dt;
        if (this.lastTime === null) {
          this.lastTime = time;
        }
        dt = time - this.lastTime;
        this.update(dt);
        this.render(this.c);
        this.lastTime = time;
        return requestAnimationFrame(this._loop.bind(this));
      };

      return App;

    })();
    return App;
  });

}).call(this);
